name: Publish Types Package

on:
  # Trigger on successful deploy to main (after schema changes)
  workflow_run:
    workflows: ['Deploy to Production']
    types:
      - completed
    branches: [main]

  # Allow manual triggering for immediate publishing
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch')

    # Grant permissions for the workflow to create releases and issues
    permissions:
      contents: write
      packages: write
      issues: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Need full history for version bumping
          fetch-depth: 0
          # persist-credentials: true allows pushing back to repo
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Generate types from production
        run: |
          echo "🔄 Generating types from production database..."
          supabase gen types typescript --linked > types/database.ts
          echo "✅ Types generated successfully"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Check if types have changed
        id: check_changes
        run: |
          if git diff --quiet types/database.ts; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No changes detected in database types"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "📝 Changes detected in database types"
            git diff --stat types/database.ts
          fi

      - name: Configure Git
        if: steps.check_changes.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version and prepare package
        if: steps.check_changes.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          # Determine version bump type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_bump }}"
          else
            # Auto-determine based on commit messages since last tag (handle no tags case)
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              echo "ℹ️ No previous tags found, defaulting to patch version"
              VERSION_TYPE="patch"
            elif git log $LAST_TAG..HEAD --oneline | grep -q "BREAKING CHANGE\|feat!"; then
              VERSION_TYPE="major"
            elif git log $LAST_TAG..HEAD --oneline | grep -q "feat:"; then
              VERSION_TYPE="minor"
            else
              VERSION_TYPE="patch"
            fi
          fi

          echo "🏷️ Bumping $VERSION_TYPE version..."

          # Commit the generated types first so npm version has a clean working directory
          git add types/database.ts
          git commit -m "chore: update generated database types"

          npm run version:$VERSION_TYPE

          echo "📦 Preparing package..."
          npm run prepare-package:ci

          # Get the new version for output
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        id: version

      - name: Create notification issue for type updates
        if: steps.check_changes.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        id: create_issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.new_version }}';
            const issueBody = [
              '## 🎉 New TypeScript Types Published!',
              '',
              'The database types have been automatically updated and published to NPM.',
              '',
              '### 📋 Details',
              `- **Version**: \`v${version}\``,
              `- **NPM Package**: \`@everylanguage/shared-types@${version}\``,
              '- **Generated from**: Production database schema',
              `- **Published at**: ${new Date().toISOString()}`,
              '',
              '### 🔄 What happened',
              '1. ✅ Types generated from production database',
              '2. ✅ Version automatically bumped',
              '3. ✅ Package published to NPM',
              '4. ✅ GitHub release created',
              '',
              '### 📱 For Application Teams',
              'Update your dependencies:',
              '```bash',
              'npm update @everylanguage/shared-types',
              '```',
              '',
              '### 🗂️ Next Steps',
              '- Types are ready to use immediately',
              '- No manual merge required',
              '- Repository types will be updated in next development cycle',
              '',
              '---',
              '*This is an automated notification. The types package has been successfully published.*'
            ].join('\n');

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📦 Types Package v${version} Published`,
              body: issueBody,
              labels: ['automated', 'types', 'published']
            });

            console.log(`Created notification issue #${issue.number}`);
            return issue.number;

      - name: Push version tags
        if: steps.check_changes.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          echo "🏷️ Pushing version tags..."
          git push --tags
          echo "✅ Tags pushed successfully"

      - name: Publish to NPM
        if: steps.check_changes.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          echo "🚀 Publishing @everylanguage/shared-types@${{ steps.version.outputs.new_version }} to NPM..."
          npm publish --access public
          echo "✅ Package published successfully!"
          echo "📦 NPM Package: https://www.npmjs.com/package/@everylanguage/shared-types"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_changes.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.new_version }}
          name: Types Package v${{ steps.version.outputs.new_version }}
          body: |
            🎉 New version of @everylanguage/shared-types published!

            ## Changes
            - Updated database types to match latest schema

            ## Installation
            ```bash
            npm install @everylanguage/shared-types@${{ steps.version.outputs.new_version }}
            ```

            ## Usage
            ```typescript
            import { Database } from '@everylanguage/shared-types';
            ```

            ## Full Changelog
            See the [full changelog](https://github.com/${{ github.repository }}/compare/v1.0.0...v${{ steps.version.outputs.new_version }}) for all changes.
          draft: false
          prerelease: false
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: steps.check_changes.outputs.changed == 'false' && github.event_name != 'workflow_dispatch'
        run: |
          echo "ℹ️ No database schema changes detected. Package publishing skipped."
          echo "To manually publish, trigger this workflow with the 'workflow_dispatch' event."
